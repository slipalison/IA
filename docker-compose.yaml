services:
  # Vector Database para embeddings
  chroma:
    image: chromadb/chroma:latest
    container_name: devops-chroma
    ports:
      - "8000:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - PERSIST_DIRECTORY=/chroma/chroma
      # 🔧 CONFIGURAÇÕES PARA INDEXAÇÃO MAIS RÁPIDA
      - CHROMA_SEGMENT_CACHE_POLICY=LRU
      - CHROMA_SEGMENT_CACHE_SIZE=1000
      - CHROMA_INDEX_CACHE_SIZE=1000
      # Forçar flush mais frequente
      - CHROMA_PERSIST_INTERVAL=10
      # Configurações HNSW otimizadas
      - CHROMA_HNSW_SPACE=cosine
      - CHROMA_HNSW_CONSTRUCTION_EF=100
      - CHROMA_HNSW_M=16
    networks:
      - devops-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 3G  # Aumentei para 3GB
        reservations:
          memory: 1G  # Aumentei reserva também


  # LLM Local (Ollama) - SEM GPU por enquanto
  #  ollama:
  #    image: ollama/ollama:latest
  #    container_name: devops-ollama
  #    ports:
  #      - "11434:11434"
  #    volumes:
  #      - ollama_data:/root/.ollama
  #    environment:
  #      - OLLAMA_HOST=0.0.0.0
  #    networks:
  #      - devops-network
  #    restart: unless-stopped
  ollama:
    image: ollama/ollama:latest
    container_name: devops-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [ gpu ]
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - OLLAMA_HOST=0.0.0.0
    ports:
      - "11434:11434"
    networks:
      - devops-network
    restart: unless-stopped
  # Redis para cache
  redis:
    image: redis:7-alpine
    container_name: devops-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - devops-network
    restart: unless-stopped

  # PostgreSQL para metadados
  postgres:
    image: postgres:15-alpine
    container_name: devops-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: devopsai
      POSTGRES_USER: devopsai
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-devopsai_2024!}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - devops-network
    restart: unless-stopped

  # Grafana para dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: devops-grafana
    ports:
      - "3030:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_SECURITY_ADMIN_USER=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - devops-network
    restart: unless-stopped
  
  chatbot-ui:
    image: ghcr.io/mckaywrigley/chatbot-ui:main
    container_name: devops-chatbot-ui
    ports:
      - "3000:3000"
    environment:
      # 🔧 Configurações básicas
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=devops-gpt-secret-key-super-secure-2024

      # 🌐 API Configuration - Apontar para sua API .NET
      - OPENAI_API_HOST=http://ia:8080
      - OPENAI_API_KEY=dummy-key-not-needed
      - DEFAULT_MODEL=devops-gpt

      # 🎨 Customizações
      - DEFAULT_SYSTEM_PROMPT=Você é o DevOpsGPT, um assistente especializado em DevOps que sempre responde em português brasileiro. Suas especialidades incluem Docker, Kubernetes, CI/CD, monitoramento, cloud computing e automação de infraestrutura.
      - DEFAULT_TEMPERATURE=0.7

      # 💾 Banco de dados local
      - DATABASE_URL=file:/app/data/chatbot.db

      # 🔒 Desabilitar autenticação para desenvolvimento
      - DISABLE_AUTH=true

    volumes:
      - chatbot_data:/app/data

    extra_hosts:
      - "host.docker.internal:host-gateway"

    restart: unless-stopped
    networks:
      - devops-network

    # ✅ Health check para garantir que está funcionando
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  ia:
    image: ia
    build:
      context: .
      dockerfile: IA.WebApi/Dockerfile
    environment:
      - CHROMA_URL=http://devops-chroma:8000
      - OLLAMA_URL=http://devops-ollama:11434
    ports:
      - "5000:8080"
    networks:
      - devops-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local
  ollama_data:
    driver: local
  chroma_data:
    driver: local
  chatbot_data:
    driver: local



networks:
  devops-network:
    driver: bridge

#version: '3.8'
#
#services:
#  # Vector Database para embeddings
#  chroma:
#    image: chromadb/chroma:latest
#    container_name: devops-chroma
#    ports:
#      - "8000:8000"
#    volumes:
#      - chroma_data:/chroma/chroma
#    environment:
#      - CHROMA_SERVER_HOST=0.0.0.0
#      - CHROMA_SERVER_HTTP_PORT=8000
#    networks:
#      - devops-network
#    restart: unless-stopped
#
#  # LLM Local (Ollama) - COM GPU
#  ollama:
#    image: ollama/ollama:latest
#    container_name: devops-ollama
#    ports:
#      - "11434:11434"
#    volumes:
#      - ollama_data:/root/.ollama
#    environment:
#      - OLLAMA_HOST=0.0.0.0
#    networks:
#      - devops-network
#    restart: unless-stopped
#    deploy:
#      resources:
#        reservations:
#          devices:
#            - driver: nvidia
#              count: 1
#              capabilities: [gpu]
#
#  # Redis para cache
#  redis:
#    image: redis:7-alpine
#    container_name: devops-redis
#    ports:
#      - "6379:6379"
#    volumes:
#      - redis_data:/data
#    networks:
#      - devops-network
#    restart: unless-stopped
#
#  # PostgreSQL para metadados
#  postgres:
#    image: postgres:15-alpine
#    container_name: devops-postgres
#    ports:
#      - "5432:5432"
#    environment:
#      POSTGRES_DB: devopsai
#      POSTGRES_USER: devopsai
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-devopsai_2024!}
#    volumes:
#      - postgres_data:/var/lib/postgresql/data
#      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
#    networks:
#      - devops-network
#    restart: unless-stopped
#
#  # Grafana para dashboards
#  grafana:
#    image: grafana/grafana:latest
#    container_name: devops-grafana
#    ports:
#      - "3000:3000"
#    environment:
#      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
#      - GF_SECURITY_ADMIN_USER=admin
#    volumes:
#      - grafana_data:/var/lib/grafana
#      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards
#    networks:
#      - devops-network
#    restart: unless-stopped
#
#volumes:
#  chroma_data:
#  ollama_data:
#  redis_data:
#  postgres_data:
#  grafana_data:
#
#networks:
#  devops-network:
#    driver: bridge

#services:
#  ia:
#    image: ia
#    build:
#      context: .
#      dockerfile: IA/Dockerfile



