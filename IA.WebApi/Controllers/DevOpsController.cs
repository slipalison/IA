using System.Text;
using System.Text.Json;
using Microsoft.AspNetCore.Mvc;

namespace IA.WebApi.Controllers;

[ApiController]
[Route("api/[controller]")]
public class DevOpsController : ControllerBase
{
    private readonly IHttpClientFactory _httpClientFactory;
    private readonly ILogger<DevOpsController> _logger;

    public DevOpsController(ILogger<DevOpsController> logger, IHttpClientFactory httpClientFactory)
    {
        _logger = logger;
        _httpClientFactory = httpClientFactory;
    }

    [HttpPost("analyze-logs")]
    public async Task<IActionResult> AnalyzeLogs([FromBody] LogAnalysisRequest request)
    {
        try
        {
            _logger.LogInformation("üîç Analisando logs...");

            var prompt =
                $@"Voc√™ √© um especialista em DevOps e deve analisar logs de sistema. SEMPRE responda em portugu√™s brasileiro.

Analise os seguintes logs e forne√ßa:
1. üîç PROBLEMAS IDENTIFICADOS: Liste todos os erros e problemas encontrados
2. üìä PADR√ïES AN√îMALOS: Identifique comportamentos suspeitos ou fora do normal  
3. ‚úÖ RECOMENDA√á√ïES: A√ß√µes espec√≠ficas para resolver os problemas
4. üö® SEVERIDADE: Classifique como CR√çTICO, ALTO, M√âDIO ou BAIXO

LOGS PARA AN√ÅLISE:
{request.LogContent}

Responda em formato JSON estruturado EM PORTUGU√äS:";

            var client = _httpClientFactory.CreateClient("OllamaClient");
            var payload = new
            {
                model = "llama2:7b",
                prompt,
                stream = false,
                options = new
                {
                    temperature = 0.3, // Mais determin√≠stico para an√°lise t√©cnica
                    top_p = 0.9,
                    num_predict = 1500
                }
            };

            var jsonContent = JsonSerializer.Serialize(payload);
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            var response = await client.PostAsync("/api/generate", content);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                return Ok(new
                {
                    analysis = JsonSerializer.Deserialize<object>(responseContent),
                    timestamp = DateTime.UtcNow,
                    logSize = request.LogContent.Length,
                    language = "pt-BR"
                });
            }

            return BadRequest("Erro ao analisar logs");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao analisar logs");
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    [HttpPost("generate-script")]
    public async Task<IActionResult> GenerateScript([FromBody] ScriptGenerationRequest request)
    {
        try
        {
            _logger.LogInformation("üîß Gerando script DevOps...");

            var prompt =
                $@"Voc√™ √© um especialista em DevOps que cria scripts de automa√ß√£o. SEMPRE responda em portugu√™s brasileiro.

Gere um script {request.ScriptType} para: {request.Description}

REQUISITOS OBRIGAT√ìRIOS:
‚úÖ Coment√°rios explicativos EM PORTUGU√äS
‚úÖ Tratamento de erros robusto
‚úÖ Valida√ß√µes de entrada
‚úÖ Logs informativos
‚úÖ Boas pr√°ticas de seguran√ßa
‚úÖ C√≥digo limpo e leg√≠vel

ESTRUTURA DO SCRIPT:
1. Cabe√ßalho com descri√ß√£o
2. Valida√ß√µes iniciais
3. Fun√ß√µes principais
4. Tratamento de erros
5. Logs e outputs

TIPO: {request.ScriptType}
DESCRI√á√ÉO: {request.Description}

Gere o script completo com coment√°rios EM PORTUGU√äS:";

            var client = _httpClientFactory.CreateClient("OllamaClient");
            var payload = new
            {
                model = "codellama:7b",
                prompt,
                stream = false,
                options = new
                {
                    temperature = 0.2, // Baixa para c√≥digo mais consistente
                    top_p = 0.8,
                    num_predict = 2000
                }
            };

            var jsonContent = JsonSerializer.Serialize(payload);
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            var response = await client.PostAsync("/api/generate", content);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                return Ok(new
                {
                    script = JsonSerializer.Deserialize<object>(responseContent),
                    scriptType = request.ScriptType,
                    timestamp = DateTime.UtcNow,
                    language = "pt-BR"
                });
            }

            return BadRequest("Erro ao gerar script");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao gerar script");
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    [HttpPost("troubleshoot")]
    public async Task<IActionResult> Troubleshoot([FromBody] TroubleshootRequest request)
    {
        try
        {
            _logger.LogInformation("üîß Iniciando troubleshooting...");

            var prompt = $@"Voc√™ √© um especialista em troubleshooting DevOps. SEMPRE responda em portugu√™s brasileiro.

PROBLEMA RELATADO: {request.Problem}
CONTEXTO: {request.Context ?? "N√£o informado"}

Forne√ßa um guia completo de troubleshooting:

üîç DIAGN√ìSTICO INICIAL:
- Poss√≠veis causas do problema
- Informa√ß√µes adicionais necess√°rias

üîß PASSOS DE RESOLU√á√ÉO:
1. Verifica√ß√µes b√°sicas
2. Comandos de diagn√≥stico
3. Solu√ß√µes passo-a-passo

üìä PREVEN√á√ÉO:
- Como evitar o problema no futuro
- Monitoramento recomendado

Responda EM PORTUGU√äS com instru√ß√µes claras e pr√°ticas e completas:";

            var client = _httpClientFactory.CreateClient("OllamaClient");
            var payload = new
            {
                model = "llama2:7b",
                prompt,
                stream = false,
                options = new
                {
                    temperature = 0.4,
                    top_p = 0.9,
                    num_predict = 1800
                }
            };

            var jsonContent = JsonSerializer.Serialize(payload);
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            var response = await client.PostAsync("/api/generate", content);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                return Ok(new
                {
                    troubleshooting = JsonSerializer.Deserialize<object>(responseContent),
                    problem = request.Problem,
                    timestamp = DateTime.UtcNow,
                    language = "pt-BR"
                });
            }

            return BadRequest("Erro ao processar troubleshooting");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao processar troubleshooting");
            return StatusCode(500, "Erro interno do servidor");
        }
    }
}

public class LogAnalysisRequest
{
    public string LogContent { get; set; } = string.Empty;
}

public class ScriptGenerationRequest
{
    public string Description { get; set; } = string.Empty;
    public string ScriptType { get; set; } = "bash";
}

public class TroubleshootRequest
{
    public string Problem { get; set; } = string.Empty;
    public string? Context { get; set; }
}