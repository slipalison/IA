using System.Text;
using System.Text.Json;
using IA.WebApi.Services;
using Microsoft.AspNetCore.Mvc;

namespace IA.WebApi.Controllers;

[ApiController]
[Route("api/[controller]")]
public class DocumentationController : ControllerBase
{
    private readonly IChromaService _chromaService;
    private readonly IHttpClientFactory _httpClientFactory;
    private readonly ILogger<DocumentationController> _logger;

    public DocumentationController(
        IChromaService chromaService,
        IHttpClientFactory httpClientFactory,
        ILogger<DocumentationController> logger)
    {
        _chromaService = chromaService;
        _httpClientFactory = httpClientFactory;
        _logger = logger;
    }

    [HttpPost("initialize")]
    public async Task<IActionResult> InitializeDocumentation()
    {
        try
        {
            _logger.LogInformation("üöÄ Inicializando base de conhecimento DevOps...");

            const string collectionName = "devops-docs";

            // üî• VERIFICAR SE J√Å TEM DOCUMENTOS NA COLE√á√ÉO
            if (await _chromaService.CheckCollectionExistsAsync(collectionName))
            {
                // Fazer uma busca simples para verificar se j√° tem conte√∫do
                var existingDocs = await _chromaService.SearchSimilarAsync(collectionName, "test", 1);

                if (existingDocs.Any())
                {
                    _logger.LogInformation("‚úÖ Cole√ß√£o j√° inicializada com {Count} documentos", existingDocs.Count);
                    return Ok(new
                    {
                        message = "Base de conhecimento j√° inicializada",
                        collectionExists = true,
                        hasDocuments = true,
                        timestamp = DateTime.UtcNow
                    });
                }
            }

            // Criar cole√ß√£o se n√£o existir
            var created = await _chromaService.CreateCollectionAsync(collectionName);
            if (!created) return BadRequest("‚ùå Falha ao criar cole√ß√£o");

            // Obter documentos base
            var documents = GetBaseDevOpsDocuments();

            // Adicionar √† cole√ß√£o
            var added = await _chromaService.AddDocumentsAsync(collectionName, documents);

            if (added)
            {
                _logger.LogInformation("‚úÖ Base inicializada com {Count} documentos √∫nicos", documents.Count);
                return Ok(new
                {
                    message = "Base de conhecimento inicializada com sucesso!",
                    documentsCount = documents.Count,
                    collectionName,
                    timestamp = DateTime.UtcNow
                });
            }

            return BadRequest("‚ùå Falha ao adicionar documentos");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå Erro ao inicializar documenta√ß√£o");
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    [HttpPost("ask")]
    public async Task<IActionResult> AskDocumentation([FromBody] DocumentationRequest request)
    {
        try
        {
            _logger.LogInformation("üîç Consultando documenta√ß√£o: {Question}", request.Question);

            const string collectionName = "devops-docs";

            // Buscar documentos similares
            var similarDocs = await _chromaService.SearchSimilarAsync(
                collectionName,
                request.Question,
                request.MaxResults ?? 3
            );

            if (!similarDocs.Any())
                return Ok(new
                {
                    answer =
                        "Desculpe, n√£o encontrei informa√ß√µes espec√≠ficas sobre sua pergunta na base de documenta√ß√£o. Posso ajudar com conceitos gerais de DevOps?",
                    sources = new string[0],
                    timestamp = DateTime.UtcNow
                });

            // Gerar resposta com contexto
            var contextualAnswer = await GenerateContextualAnswer(request.Question, similarDocs);

            return Ok(new
            {
                answer = contextualAnswer,
                sources = similarDocs.Select(d => new
                {
                    category = d.Metadata.GetValueOrDefault("category", "geral"),
                    title = d.Metadata.GetValueOrDefault("title", "Documento"),
                    relevance = Math.Round((1 - d.Distance ?? 0) * 100, 1)
                }),
                foundDocuments = similarDocs.Count,
                timestamp = DateTime.UtcNow
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå Erro ao consultar documenta√ß√£o");
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    [HttpPost("add-document")]
    public async Task<IActionResult> AddDocument([FromBody] AddDocumentRequest request)
    {
        try
        {
            _logger.LogInformation("üìù Adicionando novo documento: {Title}", request.Title);

            const string collectionName = "devops-docs";

            var document = new DocumentChunk
            {
                Id = Guid.NewGuid().ToString(),
                Content = request.Content,
                Metadata = new Dictionary<string, object>
                {
                    { "title", request.Title },
                    { "category", request.Category ?? "custom" },
                    { "created_at", DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss") },
                    { "source", "user_added" }
                }
            };

            var added = await _chromaService.AddDocumentsAsync(collectionName, new List<DocumentChunk> { document });

            if (added)
                return Ok(new
                {
                    message = "‚úÖ Documento adicionado com sucesso!",
                    documentId = document.Id,
                    title = request.Title,
                    category = request.Category
                });

            return BadRequest("Erro ao adicionar documento");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå Erro ao adicionar documento");
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    [HttpPost("cleanup-duplicates")]
    public async Task<IActionResult> CleanupDuplicates()
    {
        try
        {
            _logger.LogInformation("üßπ Iniciando limpeza de documentos duplicados...");

            // Deletar cole√ß√£o existente
            var deleteSuccess = await _chromaService.DeleteCollectionAsync("devops-docs");

            if (deleteSuccess)
            {
                _logger.LogInformation("‚úÖ Cole√ß√£o deletada com sucesso");

                // Aguardar um pouco
                await Task.Delay(2000);

                // Recriar com documentos √∫nicos
                return await InitializeDocumentation();
            }

            return BadRequest("‚ùå Falha ao deletar cole√ß√£o para limpeza");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå Erro ao limpar duplicados");
            return StatusCode(500, "Erro interno do servidor");
        }
    }

    private async Task<string> GenerateContextualAnswer(string question, List<DocumentChunk> context)
    {
        try
        {
            var contextText = string.Join("\n\n",
                context.Select(d => $"[{d.Metadata.GetValueOrDefault("category", "geral")}] {d.Content}"));

            var prompt =
                $@"Voc√™ √© um especialista em DevOps que responde perguntas baseado em documenta√ß√£o espec√≠fica. SEMPRE responda em portugu√™s brasileiro.

CONTEXTO DA DOCUMENTA√á√ÉO:
{contextText}

PERGUNTA DO USU√ÅRIO: {question}

Instru√ß√µes:
- Use APENAS as informa√ß√µes do contexto fornecido
- Responda em portugu√™s brasileiro
- Seja espec√≠fico e pr√°tico
- Se o contexto n√£o cont√©m a resposta completa, mencione isso
- Use emojis para tornar a resposta mais visual
- Cite as categorias das fontes quando relevante

RESPOSTA BASEADA NA DOCUMENTA√á√ÉO:";

            var client = _httpClientFactory.CreateClient("OllamaClient");
            var payload = new
            {
                model = "llama2:7b",
                prompt,
                stream = false,
                options = new
                {
                    temperature = 0.3,
                    top_p = 0.9,
                    num_predict = 1000
                }
            };

            var jsonContent = JsonSerializer.Serialize(payload);
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            var response = await client.PostAsync("/api/generate", content);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<JsonElement>(responseContent);

                if (result.TryGetProperty("response", out var responseText))
                    return responseText.GetString() ?? "Erro ao processar resposta";
            }

            return "Erro ao gerar resposta contextual";
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå Erro ao gerar resposta contextual");
            return "Erro ao processar sua pergunta. Tente novamente.";
        }
    }

    private List<DocumentChunk> GetBaseDevOpsDocuments()
    {
        return new List<DocumentChunk>
        {
            new()
            {
                Content =
                    "Docker √© uma plataforma de containeriza√ß√£o que permite empacotar aplica√ß√µes e suas depend√™ncias em containers leves e port√°veis. Comandos b√°sicos: docker build, docker run, docker ps, docker stop. Para criar um Dockerfile: FROM, COPY, RUN, EXPOSE, CMD.",
                Metadata = new Dictionary<string, object> { { "category", "containers" }, { "title", "Docker B√°sico" } }
            },
            new()
            {
                Content =
                    "Kubernetes √© um orquestrador de containers que automatiza deploy, scaling e gerenciamento. Componentes principais: pods, services, deployments, namespaces. Comandos kubectl: kubectl get pods, kubectl apply -f, kubectl describe, kubectl logs.",
                Metadata = new Dictionary<string, object>
                    { { "category", "containers" }, { "title", "Kubernetes Essencial" } }
            },
            new()
            {
                Content =
                    "CI/CD √© a pr√°tica de Continuous Integration e Continuous Deployment. Ferramentas populares: Jenkins, GitLab CI, GitHub Actions, Azure DevOps. Pipeline t√≠pico: checkout c√≥digo, build, testes, deploy para staging, deploy para produ√ß√£o.",
                Metadata = new Dictionary<string, object> { { "category", "cicd" }, { "title", "CI/CD Pipelines" } }
            },
            new()
            {
                Content =
                    "Monitoramento DevOps envolve observabilidade de sistemas. Stack popular: Prometheus + Grafana + AlertManager. M√©tricas importantes: CPU, mem√≥ria, disk I/O, network, lat√™ncia de aplica√ß√£o, error rate, throughput.",
                Metadata = new Dictionary<string, object>
                    { { "category", "monitoring" }, { "title", "Monitoramento e Observabilidade" } }
            },
            new()
            {
                Content =
                    "Infrastructure as Code (IaC) permite gerenciar infraestrutura via c√≥digo. Ferramentas: Terraform, CloudFormation, Ansible, Pulumi. Benef√≠cios: versionamento, reprodutibilidade, automa√ß√£o, documenta√ß√£o como c√≥digo.",
                Metadata = new Dictionary<string, object>
                    { { "category", "iac" }, { "title", "Infrastructure as Code" } }
            },
            new()
            {
                Content =
                    "AWS oferece servi√ßos como EC2 (compute), S3 (storage), RDS (database), VPC (network), IAM (security). Azure tem VM, Blob Storage, SQL Database, Virtual Network. GCP tem Compute Engine, Cloud Storage, Cloud SQL.",
                Metadata = new Dictionary<string, object> { { "category", "cloud" }, { "title", "Cloud Providers" } }
            }
        };
    }
}

public class DocumentationRequest
{
    public string Question { get; set; } = string.Empty;
    public int? MaxResults { get; set; } = 3;
}

public class AddDocumentRequest
{
    public string Title { get; set; } = string.Empty;
    public string Content { get; set; } = string.Empty;
    public string? Category { get; set; }
}